% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task.R
\name{parallel_task_queue}
\alias{parallel_task_queue}
\title{Run Tasks with a Dynamic Worker Queue}
\usage{
parallel_task_queue(
  tasks,
  worker_count = 4,
  reverse = FALSE,
  packages = character(0),
  ...
)
}
\arguments{
\item{tasks}{A list of tasks to be executed. Each task should be a list with elements 'task' (a function with no arguments) and an optional 'callback' function to be executed upon task completion.}

\item{worker_count}{An integer specifying the number of simultaneous worker processes, defaults to 4.}

\item{reverse}{A logical indicating whether to execute callbacks in reverse order compared to the tasks order.}

\item{packages}{A vector of package names to be automatically loaded in each child process before executing tasks.}

\item{...}{Additional arguments to be passed to the task functions.}
}
\value{
A list of results from the tasks, in the same order as provided.
}
\description{
This function accepts a list of tasks (each a function with no arguments) and a specified number of worker processes.
It dynamically schedules tasks to available workers and processes their results in an event loop as they complete. Tasks
can be completed in parallel and the order of execution does not matter. However, the callbacks for post-processing tasks
must be run sequentially either in the order tasks are provided or in the reverse order of reverse is TRUE.
Parallel processing is set up using the future package and child processes are terminated properly once all tasks
are completed or if an error occurs.
}
\details{
The function saves the current future plan and sets up a multisession plan with the desired number of workers.
It then restores the original plan upon exit, ensuring that any spawned sessions are terminated.
}
